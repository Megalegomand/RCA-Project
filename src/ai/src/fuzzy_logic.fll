Engine: TargetSteeringModule
InputVariable: angleSteering
	enabled: true
	Range: [-3.1415 3.1415]
	lock-range: false
	term: Z Gaussian [0.1 0]
	term: PM Bell [0.35 4 1.27]
	term: PB Sigmoid [16 0.15]
	term: NM Bell [0.35 4 -1.27]
	term: NB Sigmoid [-16 -0.15]

InputVariable: angleTarget
	enabled: true
	Range: [-3.1415 3.1415]
	lock-range: false
	term: Z Gaussian [0.1 0]
	term: PB Sigmoid [16 0.15]
	term: NM Bell [0.35 4 -1.27]
	term: NB Sigmoid [-16 -0.15]
	term: PM Bell [0.35 4 1.27]

OutputVariable: SteeringVar1
 	enabled: true
	range: -1.15 1.15
	lock-range: false
	aggregation: Maximum
	defuzzifier: Centroid 100
	default: nan
	lock-previous: false
	term: NM SigmoidDifference [24.5 -0.74 52 -0.1]
	term: Z Bell [0.1 2 0]
	term: PM SigmoidDifference [24.5 0.74 52 0.1]
	term: PB Sigmoid [18 0.75]
	term: NB Sigmoid [-18 -0.75]

RuleBlock: mamdani
  enabled: true
  conjunction: none
  disjunction: none
  implication: AlgebraicProduct
  activation: General

rule: If angleSteering is NB and angleTarget is NB then SteeringVar1 is Z
rule: If angleSteering is NB and angleTarget is NM then SteeringVar1 is Z
rule: If angleSteering is NB and angleTarget is Z then SteeringVar1 is PM   
rule: If angleSteering is NB and angleTarget is PM then SteeringVar1 is PB  
rule: If angleSteering is NB and angleTarget is PB then SteeringVar1 is PB 
rule: If angleSteering is NM and angleTarget is NB then SteeringVar1 is Z  
rule: If angleSteering is NM and angleTarget is NM then SteeringVar1 is Z   
rule: If angleSteering is NM and angleTarget is Z then SteeringVar1 is Z    
rule: If angleSteering is NM and angleTarget is PM then SteeringVar1 is PB 
rule: If angleSteering is NM and angleTarget is PB then SteeringVar1 is PB
rule: If angleSteering is Z and angleTarget is NB then SteeringVar1 is NM 
rule: If angleSteering is Z and angleTarget is NM then SteeringVar1 is NM 
rule: If angleSteering is Z and angleTarget is Z then SteeringVar1 is Z   
rule: If angleSteering is Z and angleTarget is PM then SteeringVar1 is PM 
rule: If angleSteering is Z and angleTarget is PB then SteeringVar1 is PM 
rule: If angleSteering is PM and angleTarget is NB then SteeringVar1 is NB
rule: If angleSteering is PM and angleTarget is NM then SteeringVar1 is NM
rule: If angleSteering is PM and angleTarget is Z then SteeringVar1 is Z  
rule: If angleSteering is PM and angleTarget is PM then SteeringVar1 is Z 
rule: If angleSteering is PM and angleTarget is PB then SteeringVar1 is Z 
rule: If angleSteering is PB and angleTarget is NB then SteeringVar1 is NB
rule: If angleSteering is PB and angleTarget is NM then SteeringVar1 is NM
rule: If angleSteering is PB and angleTarget is Z then SteeringVar1 is NM 
rule: If angleSteering is PB and angleTarget is PM then SteeringVar1 is Z 
rule: If angleSteering is PB and angleTarget is PB then SteeringVar1 is Z


Engine: ObstaclesAvoidanceModule
InputVariable: distance
	enabled: true
	range: 0.000 80.000
	lock-range: false
	term: Z ZShape [0.3 20]
	term: S SigmoidDifference [0.5 8 2 18]
	term: B	SShape [16 20]

InputVariable: angleToObstacle
	enabled: true
	Range: [-3.1415 3.1415]
	lock-range: false
	term: NM ZShape [-1.4 -0.5]
	term: Z ZShape [0.3 20]
	term: PM SShape [0.5 1.4]
	term: NS SShape [16 20]
	term: PS Gaussian [0.3 0.6]

OutputVariable: SteeringVar2
 	enabled: true
	range: -0.900 0.900
	lock-range: false
	aggregation: Maximum
	defuzzifier: Centroid 100
	default: nan
	lock-previous: false
	term: NM ZShape [-0.6 -0.3]
	term: Z Gaussian [0.05 0]
	term: PS SigmoidDifference [88 0.06 35 0.45]
	term: PM SShape [0.3 0.6]
	term: NS SigmoidDifference [35 -0.45 88 -0.06]

RuleBlock: mamdani
  enabled: true
  conjunction: none
  disjunction: none
  implication: AlgebraicProduct
  activation: General

rule: If distance is Z and angleToObstacle is NM then SteeringVar2 
rule: If distance is Z and angleToObstacle is NS then SteeringVar2 
rule: If distance is Z and angleToObstacle is Z then SteeringVar2  
rule: If distance is Z and angleToObstacle is PS then SteeringVar2 
rule: If distance is Z and angleToObstacle is PM then SteeringVar2 
rule: If distance is S and angleToObstacle is NM then SteeringVar2 
rule: If distance is S and angleToObstacle is NS then SteeringVar2 
rule: If distance is S and angleToObstacle is Z then SteeringVar2  
rule: If distance is S and angleToObstacle is PS then SteeringVar2 
rule: If distance is S and angleToObstacle is PM then SteeringVar2
rule: If distance is B and angleToObstacle is NM then SteeringVar2 
rule: If distance is B and angleToObstacle is NS then SteeringVar2 
rule: If distance is B and angleToObstacle is Z then SteeringVar2  
rule: If distance is B and angleToObstacle is PS then SteeringVar2 
rule: If distance is B and angleToObstacle is PM then SteeringVar2  

	
